#!/usr/bin/env python3
"""
Portfolio report generation module.

Â© Denis Shelemekh, 2020
"""
import re
from typing import List, Tuple
import logging

from porty import fileparse
from porty import tableformat
from porty import portfolio


def read_portfolio(filename: str, **opts) -> portfolio.Portfolio:
    """
    Reads portfolio from file.
    Args:
        filename: String - filename to read from.
    Returns:
        portfolio.Portfolio object.
    """
    with open(filename, 'rt') as lines:
        port = portfolio.Portfolio.from_csv(lines, **opts)

    return port


def read_prices(filename: str) -> dict:
    """
    Reads and converts prices from file.
    Args:
        filename: String - filename to read from.
    Returns:
        A dict consisting of stock names with prices.
    """

    file = open(filename, 'rt')
    prices = fileparse.parse_csv(file, has_headers=False, types=[str, float])
    file.close()
    prices = dict(prices)

    return prices


def make_report(_portfolio: portfolio.Portfolio, prices: dict) -> List[tuple]:
    """
    Makes report from supplied data.
    Args:
        _portfolio: List of stock.Stock objects.
        prices: Dict consisting of stock names with prices.
    Returns:
        A list of tuples for reporting.
    """
    report = []
    for _stock in _portfolio:
        entry = _stock.name, _stock.shares, prices[_stock.name], \
                prices[_stock.name] - _stock.price
        report.append(entry)
    return report


def parse_date(date: str) -> Tuple[int]:
    """
    Returns tuple consisting of date parts.
    Args:
        date: String - date to parse. Expected date format: '6/11/2007'
    Returns:
        A tuple consisting of integers, - parts of date. Example: (6, 11, 2007).
    """
    re_obj = re.compile(r'^(\d+)/(\d+)/(\d+)$')
    matches = re_obj.findall(date)
    matches = map(int, matches[0])
    return tuple(matches)


def print_report(report_data: List[tuple],
                 formatter: tableformat.TableFormatter) -> None:
    """
    Prints nicely formatted report.
    Args:
        report - List of tuples generated by make_report function.
        formatter - TableFormatter object used for emitting report.
    """
    formatter.headings(['Name', 'Shares', 'Price', 'Change'])
    for name, shares, price, change in report_data:
        row_data = [name, str(shares), f"{price:0.2f}", f"{change:0.2f}"]
        formatter.row(row_data)


def portfolio_report(portfolio_filename: str,
                     prices_filename: str,
                     fmt: str = "txt") -> None:
    """
    Wrapper for function calls generating portfolio report.
    Args:
        portfolio_filename: String - name of file for portfolio data.
        prices_filename: String - name of file for (updated) stock prices.
        fmt: String - abbreviation of format to generate report in.
    """
    _portfolio = read_portfolio(portfolio_filename)
    prices = read_prices(prices_filename)
    report = make_report(_portfolio, prices)
    formatter = tableformat.create_formatter(fmt)
    print_report(report, formatter)


def main(argv: List[str]) -> None:
    """
    Main function.
    Args:
        argv: List of command-line arguments.
    """
    logging.basicConfig(
        filename="report.log",
        filemode="w",
        level=logging.WARNING
    )

    if len(argv) < 3:
        raise SystemExit(f'Usage: {argv[0]} portfolio_filename prices_filename [fmt]')

    if len(argv) == 3:
        portfolio_report(argv[1], argv[2])
    elif len(argv) == 4:
        portfolio_report(argv[1], argv[2], argv[3])


if __name__ == '__main__':
    import sys
    main(sys.argv)
